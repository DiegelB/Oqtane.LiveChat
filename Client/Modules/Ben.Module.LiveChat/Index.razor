@namespace Ben.Module.LiveChat
@inherits ModuleBase
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Microsoft.JSInterop
@using Ben.Module.LiveChat.Services
@using Ben.Module.LiveChat.Models

<link rel="stylesheet" href="css/LiveChat.css" />

<div class="channel-selector">
    <select @onchange="HandleChannelChange">
        @foreach (var channel in channels)
        {
            <option value="@channel" selected="@(channel == selectedChannel)">
                @channel
            </option>
        }
    </select>
</div>

<div class="chat-container">
    <ul @ref="messageDiv" class="message-list">
        @foreach (var msg in messages)
        {
            <li>@msg</li>
        }
    </ul>
    <input @bind="message" @onkeyup="SendOnEnter" placeholder="Message" />
</div>


@* <div class="chat-container">
    <ul @ref="messageDiv" class="message-list">
        @foreach (var msg in messages)
        {
            <li>@msg</li>
        }
    </ul>
    <input @bind="message" @onkeyup="SendOnEnter" placeholder="Message" />

</div> *@

<script>
    function scrollToBottom(element) {
        element.scrollTop = element.scrollHeight;
    }
</script>

@code {
    private HubConnection hubConnection;
    private string user;
    private string message;

    // Dictionary to store messages for each channel
    private Dictionary<string, List<string>> channelMessages = new Dictionary<string, List<string>>();
    private ElementReference messageDiv;

    // Channel management
    private List<string> channels = new List<string> { "General", "Random", "Development" };
    private string selectedChannel = "General";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        // Initialize message list for each channel
        foreach (var channel in channels)
        {
            channelMessages[channel] = new List<string>();
        }

        hubConnection.On<string, string, string>("ReceiveMessage", async (channel, user, message) =>
        {
            if (channelMessages.ContainsKey(channel))
            {
                var encodedMsg = $"{user}: {message}";
                channelMessages[channel].Add(encodedMsg);
                await InvokeAsync(StateHasChanged);
                if (channel == selectedChannel)
                {
                    await ScrollToBottom(); // Scroll to the bottom only if the message is in the current channel
                }
            }
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinChannel", selectedChannel);
    }

    private async Task SendMessage()
    {
        user = PageState.User.Username;
        user = DateTime.Now.ToString("hh:mm:ss tt") + " " + user;
        await hubConnection.SendAsync("SendMessage", selectedChannel, user, message);
        message = string.Empty;
    }

    private async Task SendOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(message))
        {
            await SendMessage();
        }
    }

    private async Task HandleChannelChange(ChangeEventArgs e)
    {
        selectedChannel = e.Value.ToString();
        await hubConnection.SendAsync("JoinChannel", selectedChannel);
        await InvokeAsync(StateHasChanged);
        await ScrollToBottom();
    }

    private List<string> messages => channelMessages.ContainsKey(selectedChannel)
                                        ? channelMessages[selectedChannel]
                                        : new List<string>();

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", messageDiv);
    }
}

